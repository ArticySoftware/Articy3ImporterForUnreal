// articy Software GmbH & Co. KG
/** This code file was generated by ArticyImporter. Changes to this file will get lost once the code is regenerated. */

#pragma once

#include "ArticyRuntime/Public/ArticyExpressoScripts.h"
#include "PluginshowcaseGlobalVariables.h"
#include "PluginshowcaseExpressoScripts.generated.h"

UINTERFACE(Blueprintable)
class UPluginshowcaseMethodsProvider : public UInterface { GENERATED_BODY() };
class IPluginshowcaseMethodsProvider
{
	GENERATED_BODY()
	
public:
};

UCLASS(BlueprintType, Blueprintable)
class UPluginshowcaseExpressoScripts : public UArticyExpressoScripts
{
	GENERATED_BODY()
	
private:
	
	
private:
	
	mutable TWeakObjectPtr<UPluginshowcaseStringGlobalsVariables> StringGlobals = nullptr;
	mutable TWeakObjectPtr<UPluginshowcaseNewVariableSetVariables> NewVariableSet = nullptr;
	
	void SetGV(UArticyGlobalVariables* GV) const override
	{
		auto gv = Cast<UPluginshowcaseGlobalVariables>(GV);
		if(ensure(gv))
		{
			/** Initialize all GV namespace references */
			StringGlobals = gv->StringGlobals;
			NewVariableSet = gv->NewVariableSet;
		}
	}
	
	UClass* GetUserMethodsProviderInterface() override
	{
		return UPluginshowcaseMethodsProvider::StaticClass();
	}
	
	UObject* GetUserMethodsProviderObject() const
	{
		if(UserMethodsProvider)
			return UserMethodsProvider;
		if(DefaultUserMethodsProvider)
			return DefaultUserMethodsProvider;
		return nullptr;
	}
	
public:
	
	#pragma warning(push)
	#pragma warning(disable: 4883) //<disable "optimization cannot be applied due to function size" compile error.
	 UPluginshowcaseExpressoScripts() 
	{
		Conditions.Add(-1478692358, [&]
		{
			return ConditionOrTrue(
				(*StringGlobals->TestString) == (FString)"Hello world 2"
			);
		});
		Instructions.Add(1745292376, [&]
		{
			(*StringGlobals->TestString) = (FString)"Hallooo";
		});
		Conditions.Add(41263519, [&]
		{
			return ConditionOrTrue(
				(*StringGlobals->TestString) == (FString)"Hello world" || (*StringGlobals->TestString) == (FString)"Haaallooo" && (*StringGlobals->TestString) == (FString)"heyyy"
			);
		});
		Instructions.Add(1574601996, [&]
		{
			(*StringGlobals->TestInt)++;
		});
		Conditions.Add(-1900726807, [&]
		{
			return ConditionOrTrue(
				(*StringGlobals->TestInt) == 2
			);
		});
		Conditions.Add(-370280500, [&]
		{
			return ConditionOrTrue(
				(*StringGlobals->TestString) == (FString)"Hallooooo"
			);
		});
		Instructions.Add(-308196559, [&]
		{
			(*StringGlobals->TestInt) = 5;
		});
	}
	#pragma warning(pop)
};
